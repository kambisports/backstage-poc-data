{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Kambi Offering API",
    "description" : "Kambi Offering API - providing sports events to bet on",
    "version" : "2018"
  },
  "servers" : [ {
    "url" : "https://eu-offering.kambicdn.org/offering/v2018",
    "variables" : { }
  }, {
    "url" : "https://us1-api.aws.kambicdn.com/offering/v2018",
    "variables" : { }
  }, {
    "url" : "https://ctn-api.kambi.com/offering/v2018",
    "variables" : { }
  }, {
    "url" : "https://cts-api.kambi.com/offering/v2018",
    "variables" : { }
  } ],
  "paths" : {
    "/{offering}/betoffer/landing" : {
      "get" : {
        "tags" : [ "Bet offers" ],
        "summary" : "Get bet offer landing page",
        "description" : "The landingpage-resource consists of 8 different type of cards<li><b>Shocker :</b> For an event to be considered a 'shocker' it needs to be football, live and its main three-way betOffer must have had an odds below 2.0 at the start of the game and then had the odds raised more than 50%.\n</li><li><b>Live Right Now (LRN) :</b> Events that are live right now. Only the count of total number of events are actually used on the landingpage.\n</li><li><b>NextOff :</b> Next horse racing event to start.\n</li><li><b>Popular :</b> The 5 most popular events during the last hour in the current market. The events are chosen by number of bets/outcome for all Kambi customers. No live events.\n</li><li><b>Highlights :</b> Lists five prematch events based on participant ranking (based on placed bets historically) and preferably max two events per event group.\n</li><li><b>Starting soon :</b> Lists five prematch events that will start within the next 24 hours, sorted on start time.\n</li><li><b>Starting soon aggregate :</b> The number of events starting within the next 30 minutes.\n</li><li><b>Starting soon live :</b> The number of events that will be traded live starting within the next 40 minutes.</li>",
        "operationId" : "landingPage",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "en_GB"
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "UK"
        }, {
          "name" : "competitionId",
          "in" : "query",
          "description" : "Only show events from a certain competition/tournament (setup in offering manager)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "details of bet offer landing page",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RequestedEventsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/betoffer/event/{eventId}" : {
      "get" : {
        "tags" : [ "Bet offers" ],
        "summary" : "Get all bet offers for a event",
        "description" : "List of all bet offers for the specified event. Query parameter type can be used for filtering the bet offers by bet offer type.",
        "operationId" : "getBetOffersByEventId",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "A comma separated list of event identifiers",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Only include bet offers of this numeric bet offer type(s), comma separated. If no bet offer is available for any of the given type(s), the resource gives 404.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "range_size",
          "in" : "query",
          "description" : "Defines the maximum number of items in the response. If omitted, the maximum allowed value is used. If specified size is greater than allowed, then the maximum allowed value is used. If specified size is less than allowed, then the minimum allowed value is used. Minimum allowed value is 1 (one). Maximum allowed value is 1000 (one thousand).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "range_start",
          "in" : "query",
          "description" : "Defines the pagination offset. Default value is 0 (zero).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "details of a bet offer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BetOfferResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/betoffer/outcome" : {
      "get" : {
        "tags" : [ "Bet offers" ],
        "summary" : "Get unique bet offers for specified outcome",
        "description" : "List of unique bet offers that contain the specified outcomes. If multiple outcomes from the same bet offer are specified, only a single instance of the bet offer is returned",
        "operationId" : "getBetOffersByOutcomeIds",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Provide multiple outcome identifiers as /betoffer/outcome.json?id=1&id=2. You can also provide combinational outcomes as id=1001,1002.",
          "required" : true,
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "range_size",
          "in" : "query",
          "description" : "Defines the maximum number of items in the response. If omitted, the maximum allowed value is used. If specified size is greater than allowed, then the maximum allowed value is used. If specified size is less than allowed, then the minimum allowed value is used. Minimum allowed value is 1 (one). Maximum allowed value is 1000 (one thousand).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "range_start",
          "in" : "query",
          "description" : "Defines the pagination offset. Default value is 0 (zero).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "details of a bet offer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BetOfferResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/betoffer/{betOfferId}/playeroutcome/{playerOutcomeId}" : {
      "get" : {
        "tags" : [ "Bet offers" ],
        "summary" : "Lists bet offer details containing only the specific result Outcomes ",
        "description" : "Lists bet offer details containing only the specific resultOutcomes relevant for the specified playerOutcome in the bet offer. Applies only for winCast and scoreCast bet offers. Text labels are localized according to submitted request parameter lang.",
        "operationId" : "getBetOfferByPlayerOutcomeId",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "betOfferId",
          "in" : "path",
          "description" : "Bet offer identifier. example 57889",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "playerOutcomeId",
          "in" : "path",
          "description" : "Player outcome identifier. It should be part of the specified bet offer.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "range_size",
          "in" : "query",
          "description" : "Defines the maximum number of items in the response. If omitted, the maximum allowed value is used. If specified size is greater than allowed, then the maximum allowed value is used. If specified size is less than allowed, then the minimum allowed value is used. Minimum allowed value is 1 (one). Maximum allowed value is 1000 (one thousand).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "range_start",
          "in" : "query",
          "description" : "Defines the pagination offset. Default value is 0 (zero).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "details of a bet offer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BetOfferResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/betoffer/group/{groupIds}" : {
      "get" : {
        "tags" : [ "Bet offers" ],
        "summary" : "List of all prematch and live bet offers in the specified event group.",
        "description" : "List of all prematch and live bet offers in the specified event group. For live bet offers we also check that they are onsite as well. To filter just the prematch or live bet offers use the exclusion flags.",
        "operationId" : "getBetOffersByGroupId",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "groupIds",
          "in" : "path",
          "description" : "List of Event group identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "excludeLive",
          "in" : "query",
          "description" : "Whether to exclude live bet offers or events",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "excludePrematch",
          "in" : "query",
          "description" : "Whether to exclude prematch bet offers or events",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "onlyMain",
          "in" : "query",
          "description" : "Whether to filter out only main bet offers",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "onlyStreamed",
          "in" : "query",
          "description" : "Enables filtering by event web streaming status",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "onlyCompetitions",
          "in" : "query",
          "description" : "Enables filtering by event type",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Only include bet offers of this numeric bet offer type(s), comma separated. If no bet offer is available for any of the given type(s), the resource gives 404.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Bet offer category",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "range_size",
          "in" : "query",
          "description" : "Defines the maximum number of items in the response. If omitted, the maximum allowed value is used. If specified size is greater than allowed, then the maximum allowed value is used. If specified size is less than allowed, then the minimum allowed value is used. Minimum allowed value is 1 (one). Maximum allowed value is 1000 (one thousand).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "range_start",
          "in" : "query",
          "description" : "Defines the pagination offset. Default value is 0 (zero).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "details of a bet offer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BetOfferResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/betoffer/mostpopular/3way" : {
      "get" : {
        "tags" : [ "Bet offers" ],
        "summary" : "Get most popular three-way betoffer",
        "description" : "Country specific list of bet offers that contain the five most popular outcomes. Lang parameter decides country. The popular outcomes have the property popular with value true.",
        "operationId" : "getMostPopular3way",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "competitionId",
          "in" : "query",
          "description" : "Only show events from a certain competition/tournament.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "excludeLive",
          "in" : "query",
          "description" : "Set to true if live betOffers should not be returned",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "excludePrematch",
          "in" : "query",
          "description" : "Set to true if betOffers prematch should not be returned",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "details of a bet offer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BetOfferResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/betoffer/participant/{participantId}" : {
      "get" : {
        "tags" : [ "Bet offers" ],
        "summary" : "Get bet offer based on participant",
        "description" : "List of all open bet offers for the specified participant. The participant must be listed as participating in the bet offer’s event to be found. Participants only connected to an outcome within the bet offer will not be found by this resource. Query parameter type can be used for filtering the bet offers by bet offer type.",
        "operationId" : "getBetOffersByParticipantId",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "participantId",
          "in" : "path",
          "description" : "Participant identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Only include bet offers of this numeric bet offer type(s), comma separated. If no bet offer is available for any of the given type(s), the resource gives 404.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "range_size",
          "in" : "query",
          "description" : "Defines the maximum number of items in the response. If omitted, the maximum allowed value is used. If specified size is greater than allowed, then the maximum allowed value is used. If specified size is less than allowed, then the minimum allowed value is used. Minimum allowed value is 1 (one). Maximum allowed value is 1000 (one thousand).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "range_start",
          "in" : "query",
          "description" : "Defines the pagination offset. Default value is 0 (zero).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "details of a bet offer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BetOfferResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/betoffer/selected/{categoryGroupName}/event/{eventId}" : {
      "get" : {
        "tags" : [ "Bet offers" ],
        "summary" : "Get bet offer for a category and event",
        "description" : "List selected bet offers for the specified event. The bet offers returned is specified by the setup of categories in the given category view (In the betoffer category client). The resource is dynamic in the way that if a betoffer is suspended or closed the next (in category mapping sort order) betoffer for that category will be returned.",
        "operationId" : "getBetoffersByCategoryViewForEvent",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "categoryGroupName",
          "in" : "path",
          "description" : "The name of the category view of interest. The betoffers returned matches the categories specified in this category view.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "Event identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "List of event identifiers. Events which are not found are ignored.",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "range_size",
          "in" : "query",
          "description" : "Defines the maximum number of items in the response. If omitted, the maximum allowed value is used. If specified size is greater than allowed, then the maximum allowed value is used. If specified size is less than allowed, then the minimum allowed value is used. Minimum allowed value is 1 (one). Maximum allowed value is 1000 (one thousand).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "range_start",
          "in" : "query",
          "description" : "Defines the pagination offset. Default value is 0 (zero).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "details of a bet offer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BetOfferCombinedResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "If none of the given events are found. The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/betoffer/{betOfferIds}" : {
      "get" : {
        "tags" : [ "Bet offers" ],
        "summary" : "Get bet offers by ids",
        "description" : "List of all bet offers for the specified ids. ",
        "operationId" : "getBetOffersById",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "betOfferIds",
          "in" : "path",
          "description" : "A comma separated list of bet offer identifiers",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "details of a bet offer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BetOfferResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/category/{categoryGroupNames}/sport/{sportId}" : {
      "get" : {
        "tags" : [ "Bet offer category" ],
        "summary" : "get bet offer categories based on sport",
        "description" : "Returns bet offer categories for the sport.",
        "operationId" : "getBetOfferCategoriesBySportAndCategoryGroupName",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "categoryGroupNames",
          "in" : "path",
          "description" : "A comma separated list of category group names",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "pre_match_event"
        }, {
          "name" : "sportId",
          "in" : "path",
          "description" : "The [sport](#/docs/restapi/sports)",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "FOOTBALL"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "details of bet offer category",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BetOfferCategoryResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/group" : {
      "get" : {
        "tags" : [ "Event group" ],
        "summary" : "Get Event groups",
        "description" : "Hierarchy of event groups starting from root node. Maximum depth of root node(s) is specified as request parameter depth. If any group has subgroups and subgroups are not to be included in the response (depth parameter limitation) then reference to subgroups (URI) is generated. If group has neither subgroups nor reference to subgroups then it contains events only. A list of events for a particular group can be retrieved via event resource. Only groups with at least one active prematch bet offer are included. That service is supposed to have the highest performance and it is recommended to retrieve the entire tree in one call and cache it locally. Group labels are localized according to submitted request parameter lang.",
        "operationId" : "getAllEventGroups",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "depth",
          "in" : "query",
          "description" : "Maximum depth of root nodes. If omitted, the entire tree will be fetched",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "competitionId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/{offering}/group/{groupId}" : {
      "get" : {
        "tags" : [ "Event group" ],
        "summary" : "Get Event group for an identifier",
        "description" : "Hierarchy of event groups starting from group specified as groupId request parameter. Maximum depth of root node is specified as request parameter depth. If any group has subgroups and subgroups are not to be included in the response (depth parameter limitation) then reference to subgroups (URI) is generated. If group has neither subgroups nor reference to subgroups then it contains events only. A list of events for a particular group can be retrieved via /event/group/{groupId}.format. Only groups with at least one active bet offer are included.\n\nGroup labels are localized according to submitted request parameter lang.",
        "operationId" : "getEventGroupsByGroupId",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "groupId",
          "in" : "path",
          "description" : "Event group identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "depth",
          "in" : "query",
          "description" : "Maximum depth of root nodes. If omitted, the entire tree will be fetched",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "competitionId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/{offering}/group/highlight" : {
      "get" : {
        "tags" : [ "Event group" ],
        "summary" : "List of event group highlighted for a supplied grouping for some marketing reason",
        "operationId" : "getHighlightedGroups",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "depth",
          "in" : "query",
          "description" : "Maximum depth of root nodes. If omitted, the entire tree will be fetched",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/{offering}/event/{eventId}/livedata" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get live data on an event",
        "description" : "Live (real time) data for event specified as parameter eventId. The data includes scores, match clock (if available) and team statistics (if available). Text labels are localized according to submitted request parameter lang.",
        "operationId" : "getLiveDataById",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "Event identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiveDataResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/event/live/open" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get live and open events",
        "description" : "List of all live events that are open. Text labels are localized according to submitted request parameter lang.",
        "operationId" : "getOpenLiveEvents",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "depth",
          "in" : "query",
          "description" : "Maximum depth of root nodes. If omitted, the entire tree will be fetched",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "competitionId",
          "in" : "query",
          "description" : "Competition identifier",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiveEventResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/event/group/{groupId}" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get Events based on group id",
        "description" : "List of all events with at least one open bet offer from the specified group and its subgroups. It is not possible to retrieve a list of all events for the root group (groupId=1). Text labels are localized according to submitted request parameter “lang”.",
        "operationId" : "getAllEventsForEventGroup",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "groupId",
          "in" : "path",
          "description" : "Group identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/event/externalId" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Fetches a mapping between Kambi event ID and the specified external ID",
        "operationId" : "getInternalEventIdsByExternalProviderIds",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "List of external identifiers",
          "required" : true,
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "externalEventProvider",
          "in" : "query",
          "description" : "External event provider. Currently only the value EP_BETRADAR is available",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalEventMappingResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/event/icon" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Fetches events which has participant icons (silks).",
        "description" : "Of the event ids given in the list 'id', those who has at least one participant with icon (silk) is populated and returned.",
        "operationId" : "getIconsByEventIds",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "List of event ids",
          "required" : true,
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/event/livecalendar" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Fetches the list of upcoming or ongoing live events.",
        "operationId" : "getLiveCalendar",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "If specified, then no events will be returned that have start date before this date. If not specified then the current date with time adjusted back to the nearest whole hour. For example: If current time is 15:29:43, then events starting at 15:00:00 are included.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "If specified, then no events will be returned that have start date after this date. If not specified, then the date is assumed to be 7 days in the future with time adjusted to just before midnight (23:59:59).",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "range_start",
          "in" : "query",
          "description" : "Defines the pagination offset. Default value is 0 (zero).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "range_size",
          "in" : "query",
          "description" : "Defines the maximum number of items in the response. If omitted, the maximum allowed value is used. If specified size is greater than allowed, then the maximum allowed value is used. If specified size is less than allowed, then the minimum allowed value is used. Minimum allowed value is 1 (one). Maximum allowed value is 1000 (one thousand).",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "ongoing",
          "in" : "query",
          "description" : "Set the value to true to include ongoing events in the response",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "streamed",
          "in" : "query",
          "description" : "If the value is set to true, then only web streamed events are returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "group",
          "in" : "query",
          "description" : "The ID of an event group. If specified, then all returned events are in this group or in one of it’s child groups",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "externalEventProvider",
          "in" : "query",
          "description" : "External event provider. Currently only the value EP_BETRADAR is available.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventCalendarResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/event/participant/{participantId}" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get Events based on participant id",
        "description" : "List of all events, with at least one open bet offer, where the given participant is participating. The participant must be listed as participating in the event to be found. Participants only connected to an outcome within the event will not be found by this resource. Text labels are localized according to submitted request parameter lang.",
        "operationId" : "getAllEventsForParticipant",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "participantId",
          "in" : "path",
          "description" : "Participant identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/listView/{sports}/{regions}/{leagues}" : {
      "get" : {
        "tags" : [ "List View" ],
        "summary" : "List events for a sport, region and league",
        "description" : "Returns a list of Events for a sport, region, league and filter based on betOffers, betOfferCategory, categoryGroup etc",
        "operationId" : "getEvents",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "sports",
          "in" : "path",
          "description" : "code for sports",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "football"
        }, {
          "name" : "regions",
          "in" : "path",
          "description" : "region code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "england"
        }, {
          "name" : "leagues",
          "in" : "path",
          "description" : "league code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "en_GB"
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "GB"
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "If participants should be included in the response",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          },
          "example" : false
        }, {
          "name" : "useCombined",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each pre-match event.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          }
        }, {
          "name" : "useCombinedLive",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each event. Can only be set if useCombined is set to true.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Include only bet offers which are related to given category",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "competitionId",
          "in" : "query",
          "description" : "Only show events from a certain competition/tournament (setup in offering manager)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "There are some limits of number of shown events, depending on how many there are within certain future time periods. Also the headings are different depending on the number of events. This logic is called now-and-soon.\n<li>If at least 30 events are “available” (currently in-play or will start) within next 24 hours for current offering and filtering parameters, then show all events within 24 hours.</li><li>Otherwise, if at least 50 events are “available” within next 7 days for current offering and filtering parameters, then show all events within 7 days.</li><li>Otherwise, show all events (no future limit).</li>",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListView"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/listView/{sports}/{regions}/{leagues}/{participants}" : {
      "get" : {
        "tags" : [ "List View" ],
        "summary" : "List events for a sport, region, league and participants",
        "description" : "Returns a list of Events for a sport, region, league, participants and filter based on betOffers, betOfferCategory, categoryGroup etc",
        "operationId" : "getEvents_1",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "sports",
          "in" : "path",
          "description" : "code for sports",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "football"
        }, {
          "name" : "regions",
          "in" : "path",
          "description" : "region code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "england"
        }, {
          "name" : "leagues",
          "in" : "path",
          "description" : "league code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        }, {
          "name" : "participants",
          "in" : "path",
          "description" : "participant code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "en_GB"
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "GB"
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "If participants should be included in the response",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          },
          "example" : false
        }, {
          "name" : "useCombined",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each pre-match event.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          }
        }, {
          "name" : "useCombinedLive",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each event. Can only be set if useCombined is set to true.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Include only bet offers which are related to given category",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "competitionId",
          "in" : "query",
          "description" : "Only show events from a certain competition/tournament (setup in offering manager)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "There are some limits of number of shown events, depending on how many there are within certain future time periods. Also the headings are different depending on the number of events. This logic is called now-and-soon.\n<li>If at least 30 events are “available” (currently in-play or will start) within next 24 hours for current offering and filtering parameters, then show all events within 24 hours.</li><li>Otherwise, if at least 50 events are “available” within next 7 days for current offering and filtering parameters, then show all events within 7 days.</li><li>Otherwise, show all events (no future limit).</li>",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListView"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/listView/{sports}/{regions}/{leagues}/{participants}/{attributes}" : {
      "get" : {
        "tags" : [ "List View" ],
        "summary" : "List events for a sport, region, league, participants and attributes",
        "description" : "Returns a list of Events for a sport, region, league, participants and filter based on betOffers, betOfferCategory, categoryGroup etc",
        "operationId" : "getEvents_2",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "sports",
          "in" : "path",
          "description" : "code for sports",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "football"
        }, {
          "name" : "regions",
          "in" : "path",
          "description" : "region code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "england"
        }, {
          "name" : "leagues",
          "in" : "path",
          "description" : "league code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        }, {
          "name" : "participants",
          "in" : "path",
          "description" : "participant code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        }, {
          "name" : "attributes",
          "in" : "path",
          "description" : "Filters the events based on attribute term.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "starting-soon", "streaming", "in-play", "starting-from", "matches", "competitions", "upcoming-live", "display-default", "starting-within" ]
          },
          "example" : "in-play"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "en_GB"
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "GB"
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "If participants should be included in the response",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          },
          "example" : false
        }, {
          "name" : "useCombined",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each pre-match event.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          }
        }, {
          "name" : "useCombinedLive",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each event. Can only be set if useCombined is set to true.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Include only bet offers which are related to given category",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "competitionId",
          "in" : "query",
          "description" : "Only show events from a certain competition/tournament (setup in offering manager)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "From datetime when using with starting-within attribute",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "To datetime when using with starting-within attribute",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "There are some limits of number of shown events, depending on how many there are within certain future time periods. Also the headings are different depending on the number of events. This logic is called now-and-soon.\n<li>If at least 30 events are “available” (currently in-play or will start) within next 24 hours for current offering and filtering parameters, then show all events within 24 hours.</li><li>Otherwise, if at least 50 events are “available” within next 7 days for current offering and filtering parameters, then show all events within 7 days.</li><li>Otherwise, show all events (no future limit).</li>",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListView"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/listView" : {
      "get" : {
        "tags" : [ "List View" ],
        "summary" : "List events",
        "description" : "Returns a list of Events and filter based on betOffers, betOfferCategory, categoryGroup etc",
        "operationId" : "getEvents_3",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "en_GB"
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "GB"
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          },
          "example" : false
        }, {
          "name" : "useCombined",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each pre-match event.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          }
        }, {
          "name" : "useCombinedLive",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each event. Can only be set if useCombined is set to true.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Include only bet offers which are related to given category",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "competitionId",
          "in" : "query",
          "description" : "Only show events from a certain competition/tournament (setup in offering manager)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "There are some limits of number of shown events, depending on how many there are within certain future time periods. Also the headings are different depending on the number of events. This logic is called now-and-soon.\n<li>If at least 30 events are “available” (currently in-play or will start) within next 24 hours for current offering and filtering parameters, then show all events within 24 hours.</li><li>Otherwise, if at least 50 events are “available” within next 7 days for current offering and filtering parameters, then show all events within 7 days.</li><li>Otherwise, show all events (no future limit).</li>",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListView"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/listView/{sports}/{regions}" : {
      "get" : {
        "tags" : [ "List View" ],
        "summary" : "List events for a sport and region",
        "description" : "Returns a list of Events for a sport and region and filter based on betOffers, betOfferCategory, categoryGroup etc",
        "operationId" : "getEvents_4",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "sports",
          "in" : "path",
          "description" : "code for sports",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "football"
        }, {
          "name" : "regions",
          "in" : "path",
          "description" : "region code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "england"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "en_GB"
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "GB"
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "If participants should be included in the response",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          },
          "example" : false
        }, {
          "name" : "useCombined",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each pre-match event.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          }
        }, {
          "name" : "useCombinedLive",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each event. Can only be set if useCombined is set to true.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Include only bet offers which are related to given category",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "competitionId",
          "in" : "query",
          "description" : "Only show events from a certain competition/tournament (setup in offering manager)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "There are some limits of number of shown events, depending on how many there are within certain future time periods. Also the headings are different depending on the number of events. This logic is called now-and-soon.\n<li>If at least 30 events are “available” (currently in-play or will start) within next 24 hours for current offering and filtering parameters, then show all events within 24 hours.</li><li>Otherwise, if at least 50 events are “available” within next 7 days for current offering and filtering parameters, then show all events within 7 days.</li><li>Otherwise, show all events (no future limit).</li>",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListView"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/listView/{sports}" : {
      "get" : {
        "tags" : [ "List View" ],
        "summary" : "List events for a sport",
        "description" : "Returns a list of Events for a Sport and filter based on betOffers, betOfferCategory, categoryGroup etc",
        "operationId" : "getEvents_5",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "sports",
          "in" : "path",
          "description" : "code for sports",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "football"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "en_GB"
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "GB"
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "If participants should be included in the response",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          },
          "example" : false
        }, {
          "name" : "useCombined",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each pre-match event.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          }
        }, {
          "name" : "useCombinedLive",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each event. Can only be set if useCombined is set to true.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Include only bet offers which are related to given category",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "competitionId",
          "in" : "query",
          "description" : "Only show events from a certain competition/tournament (setup in offering manager)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "There are some limits of number of shown events, depending on how many there are within certain future time periods. Also the headings are different depending on the number of events. This logic is called now-and-soon.\n<li>If at least 30 events are “available” (currently in-play or will start) within next 24 hours for current offering and filtering parameters, then show all events within 24 hours.</li><li>Otherwise, if at least 50 events are “available” within next 7 days for current offering and filtering parameters, then show all events within 7 days.</li><li>Otherwise, show all events (no future limit).</li>",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListView"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/meeting/{sport}" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get Meetings based on sport",
        "description" : "Returns a sorted list of active meetings for the given sport term.",
        "operationId" : "getMeetings",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "sport",
          "in" : "path",
          "description" : "code for sports",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "horse_racing"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "en_GB"
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "GB"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of meetings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Meeting"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/oddsLadder" : {
      "get" : {
        "tags" : [ "Odds ladder" ],
        "summary" : "Get available presentation odds ladder",
        "description" : "Returns available odds ladder to allow client side odds conversions to american or fractional format. If decimal value that should be converted from is missing in table, proceed to nearest lower value.",
        "operationId" : "getOddsLadders",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of mapping from decimal value to american and fractional odds format.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OddsLadder"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/onDemandPricing/event/{eventId}" : {
      "get" : {
        "tags" : [ "On Demand Pricing" ],
        "summary" : "Get all combinable outcomes for multiple event(s)",
        "description" : "List events with combinable outcomes within the same event.",
        "operationId" : "onDemandPricing",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "A comma separated list of event identifiers",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "en_GB"
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "GB"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of pricing object describing all combinable outcomes in all ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnDemandPricingResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/onDemandPricing/event/{eventId}/outcome/{delimitedOutcomeIds}" : {
      "get" : {
        "tags" : [ "On Demand Pricing" ],
        "summary" : "Get pricing of selected outcomes within same event",
        "description" : "Returns odds offered for selected(if any) outcomes with possibly combinable outcomes within the same event",
        "operationId" : "onDemandPricingWithSelectedOutcomes",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "Event id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "delimitedOutcomeIds",
          "in" : "path",
          "description" : "A comma separated list of selected outcome identifiers",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "en_GB"
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "GB"
        } ],
        "responses" : {
          "200" : {
            "description" : "The ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventOutcomePricingDto"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/term/search" : {
      "get" : {
        "tags" : [ "Term search" ],
        "summary" : "The term search is solution where the user can write free-text terms and will return search-terms that matches the free-text.",
        "description" : "The term search is solution where the user can write free-text terms and will return search-terms that matches the free-text. It is worth pointing out that the search api is highly bound to Kambi HTML5 client.\n\nAt least two characters are required to make a query. The search is case insensitive and searches on the start of each word. Only start of a word is searchable, not letters within a word. E.g. “hock” will find the sport Ice Hockey, while searching for “key” won’t find it. Even “I hoc” will return Ice Hockey.\n\nFor non-english punters the search is performed in both their own language and English. (Sometimes all countries share the same translation, specially for team and player names, although they might of course be different as well.) The user can search for sports (e.g. Ice hockey), regions (e.g. Spain), leagues (e.g. Allsvenskan) and team-participants within a sport (e.g. Manchester United). A participant always belongs to one sport , but can be within multiple leagues, e.g. Chelsea is both in CL and PL.\n\n",
        "operationId" : "searchTerms",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "term",
          "in" : "query",
          "description" : "The term (or words) to search for",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search terms that matches the free text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchTermsView"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/section/eventgroup/{eventGroupIds}" : {
      "get" : {
        "tags" : [ "Section" ],
        "summary" : "Get sections of events within given event groups",
        "description" : "Returns sections of events and their major bet offers. The sections are divided per requested event group.\nA section contains at most 10 (or 'sectionMaxSize') live and upcoming events, sorted by event start time.",
        "operationId" : "getSections",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "eventGroupIds",
          "in" : "path",
          "description" : "Event group numeric identifier(s), comma separated",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "1000093656,1000093190"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "en_GB"
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Defines the geographical market that the player is registered in. Example GB, FR",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "GB"
        }, {
          "name" : "sectionMaxSize",
          "in" : "query",
          "description" : "Max number of events per section (default is 10)",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          },
          "example" : 10
        }, {
          "name" : "useCombined",
          "in" : "query",
          "description" : "Whether a combination of multiple bet offers might be included for each pre-match event.",
          "required" : true,
          "schema" : {
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "example" : true
        }, {
          "name" : "onlyMatches",
          "in" : "query",
          "description" : "If only match event should be considered (no competition events)",
          "required" : true,
          "schema" : {
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "example" : true
        }, {
          "name" : "includeParticipants",
          "in" : "query",
          "description" : "Defines if participant information should be included in the response.",
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "enum" : [ true, false ]
          },
          "example" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful request. The response body contains sections of event groups and its events and major bet offers.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SectionResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    },
    "/{offering}/translation" : {
      "get" : {
        "tags" : [ "Translation" ],
        "summary" : "Get translations for events and event groups",
        "operationId" : "getTranslationByIds",
        "parameters" : [ {
          "name" : "offering",
          "in" : "path",
          "description" : "Unique identifier assigned to the API user",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kambi"
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Event identifiers",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "groupId",
          "in" : "query",
          "description" : "Event group identifiers",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Defines what [language](#/docs/restapi/localization) should be used for localized texts. Example en_GB, fr_FR",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeRaceTime",
          "in" : "query",
          "description" : "Whether to include race time in response",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Translated List of event names and group path for the given ids. Text labels are localized according to submitted request parameter lang.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TranslationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contained invalid data, e.g. a string was submitted instead of a number or an unsupported language was requested. The accompanying error message may specify more details, e.g. “Bet offer ID ABC is not a valid id”."
          },
          "404" : {
            "description" : "The URI requested is invalid or the requested resource does not exist. The accompanying error message may specify more details, e.g. “No bet offers found” (e.g. unknown ID) or “invalid resource path” (e.g. misspelled or unknown path)."
          },
          "405" : {
            "description" : "The request used a not allowed method, for example POST when only GET is allowed."
          },
          "406" : {
            "description" : "The server cannot produce the response in a format requested by the client agent. The list of supported media types will be enclosed in the response entity. The response entity format is JSON."
          },
          "500" : {
            "description" : "An error occurred at server side while processing request. An accompanying error message may explain the reason."
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "BetOffer" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier of the bet offer.",
            "format" : "int64"
          },
          "suspended" : {
            "type" : "boolean",
            "description" : "If value is true, then the bet offer is suspended. The property is omitted otherwise."
          },
          "closed" : {
            "type" : "string",
            "description" : "Date and time after which no bets will be accepted for this bet offer and the bet offer will be removed from the offering. If the bet offer is offered live this field will be omitted. See [Data Formats](#/docs/restapi/conventions) for the formatting.)",
            "format" : "date-time"
          },
          "criterion" : {
            "$ref" : "#/components/schemas/Criterion"
          },
          "extra" : {
            "type" : "string",
            "description" : "Localized extra information for the bet offer."
          },
          "betOfferType" : {
            "$ref" : "#/components/schemas/BetOfferType"
          },
          "placeLimit" : {
            "type" : "integer",
            "description" : "The number of participants in the Outright Place bet offer. See also the place property. Value 2 means first two participants to finish, value 3 means first three participants to finish etc. The number of positions for a MultiPosition bet offer. (2 for forecast and 3 for tricast for example)",
            "format" : "int64"
          },
          "eventId" : {
            "type" : "integer",
            "description" : "Identifier of the event the bet offer belongs to.",
            "format" : "int64"
          },
          "outcomes" : {
            "type" : "array",
            "description" : "List of outcomes. Doesn’t apply to WinCast and ScoreCast bet offers.",
            "items" : {
              "$ref" : "#/components/schemas/Outcome"
            }
          },
          "place" : {
            "type" : "boolean",
            "description" : "If value is true, then the bet offer is Outright Place bet offer."
          },
          "eachWay" : {
            "$ref" : "#/components/schemas/EachWay"
          },
          "scorerType" : {
            "$ref" : "#/components/schemas/OutcomeCriterion"
          },
          "combinableOutcomes" : {
            "$ref" : "#/components/schemas/CombinableOutcomes"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags applied to this bet offer.\nValues might include but are not limited to:\n* OFFERED_LIVE - The bet offer will be offered live.\n* OFFERED_PREMATCH - The bet offer will be offered live.\n* NOT_COMBINABLE - The bet offer can not be combined with other bet offers when placing bets. It tag is omitted the bet offer can be combined with other bet offers.\n* STARTING_PRICE - The odds of the bet offer will be set during settling. The odds for this bet offer will be returned as -1.\n* MAIN - The bet offer is the main bet offer within this event (one bet offer can be main for prematch and one can be main for live).\n* RULE4 - Rule 4 applies to the bet offer. See the official terms and conditions for the description of Rule 4.\n* PBA_DISABLED - Partial Bet Approval is not available for this bet offer.\n* ENHANCED_PLACE_TERMS - The bet offer has enhanced place terms (horse racing).\n* AMERICAN_DISPLAY_FORMAT - Indicates that the betOffer is in the Away @ Home format.\n* MAIN_LINE - The bet offer has the most even odds of all with same criterion order.",
            "items" : {
              "type" : "string",
              "description" : "List of tags applied to this bet offer.\nValues might include but are not limited to:\n* OFFERED_LIVE - The bet offer will be offered live.\n* OFFERED_PREMATCH - The bet offer will be offered live.\n* NOT_COMBINABLE - The bet offer can not be combined with other bet offers when placing bets. It tag is omitted the bet offer can be combined with other bet offers.\n* STARTING_PRICE - The odds of the bet offer will be set during settling. The odds for this bet offer will be returned as -1.\n* MAIN - The bet offer is the main bet offer within this event (one bet offer can be main for prematch and one can be main for live).\n* RULE4 - Rule 4 applies to the bet offer. See the official terms and conditions for the description of Rule 4.\n* PBA_DISABLED - Partial Bet Approval is not available for this bet offer.\n* ENHANCED_PLACE_TERMS - The bet offer has enhanced place terms (horse racing).\n* AMERICAN_DISPLAY_FORMAT - Indicates that the betOffer is in the Away @ Home format.\n* MAIN_LINE - The bet offer has the most even odds of all with same criterion order."
            }
          },
          "oddsStats" : {
            "$ref" : "#/components/schemas/OddsStats"
          },
          "sortOrder" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cashOutStatus" : {
            "type" : "string",
            "enum" : [ "ENABLED", "DISABLED", "SUSPENDED" ]
          },
          "from" : {
            "type" : "integer",
            "description" : "Position bet offers only. Start of position interval.",
            "format" : "int32"
          },
          "to" : {
            "type" : "integer",
            "description" : "Position bet offers only. End of position interval.",
            "format" : "int32"
          },
          "description" : {
            "type" : "string",
            "description" : "Position bet offers only. Extra localized description of this bet offer, related to \"to\" and \"from\"."
          }
        },
        "description" : "Represents a bet offer belonging to an event."
      },
      "BetOfferType" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifier of the bet offer type.",
            "format" : "int32"
          },
          "name" : {
            "type" : "string",
            "description" : "Localized label for the bet offer type."
          },
          "englishName" : {
            "type" : "string",
            "description" : "English language label for the bet offer type."
          }
        },
        "description" : "Bet offer type. See general documentation for available types."
      },
      "CombinableOutcomes" : {
        "type" : "object",
        "properties" : {
          "playerOutcomes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Outcome"
            }
          },
          "resultOutcomes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Outcome"
            }
          },
          "outcomeCombinations" : {
            "type" : "array",
            "description" : "List of <player outcome - result outcome> pairs with respective odds.",
            "items" : {
              "$ref" : "#/components/schemas/OutcomeCombination"
            }
          }
        }
      },
      "Criterion" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifier of the criterion.",
            "format" : "int64"
          },
          "label" : {
            "type" : "string",
            "description" : "Localized label for the criterion."
          },
          "englishLabel" : {
            "type" : "string",
            "description" : "English language label for the criterion."
          },
          "order" : {
            "type" : "array",
            "description" : "List of numbers describing point within a match, depending on match structure. E.g. a tennis game at set 1, game 5, point 2 has the value [1, 5, 2]. This enables the possibility to sort between bet offers with the same criterion.",
            "items" : {
              "type" : "integer",
              "description" : "List of numbers describing point within a match, depending on match structure. E.g. a tennis game at set 1, game 5, point 2 has the value [1, 5, 2]. This enables the possibility to sort between bet offers with the same criterion.",
              "format" : "int32"
            }
          },
          "occurrenceType" : {
            "type" : "string",
            "description" : "Occurrence type criteria, what is counted. The possible values might be extended. If not known, the value is UNTYPED.",
            "enum" : [ "DRIVE_RESULT", "BALL_PUNTED", "CARDS", "DRIVE_END", "DRIVE_END_HALF_TIME", "DRIVE_START", "FIELD_GOALS", "FIELD_GOAL", "FIELD_GOAL_ATTEMPTS", "GOALS", "INTERCEPTIONS", "PASSING_YARDS", "PENALTIES", "POINTS", "RECEIVING_YARDS", "ROUGES", "RUSHING_YARDS", "SAFETIES", "SAFETY", "SCORING_PLAY", "SCORING_PLAYS", "TIMEOUT", "TOUCHDOWNS", "TURNOVERS", "TWO_POINT_SAFETIES", "UNTYPED" ]
          },
          "occurrenceNumberInLifetime" : {
            "type" : "integer",
            "description" : "Used for sorting of bet offers of type OCCURRENCE_METHOD. This number represents the sequence order of the occurrence type, within the lifetime.",
            "format" : "int32"
          },
          "lifetime" : {
            "type" : "string",
            "description" : "Time criteria, during what time period of the event this bet offer applies to. The possible values might be extended. If not known, the value is UNTYPED.",
            "enum" : [ "FULL_TIME", "FULL_TIME_OVERTIME", "UNTYPED" ]
          },
          "occurrenceNumber" : {
            "type" : "integer",
            "description" : "The number of occurrences of the occurrence type during the lifetime this bet offer applies to.",
            "format" : "int32"
          },
          "raceToValue" : {
            "type" : "integer",
            "description" : "First to reach this value.",
            "format" : "int32"
          }
        },
        "description" : "Bet offer criterion."
      },
      "EachWay" : {
        "type" : "object",
        "properties" : {
          "fractionMilli" : {
            "type" : "integer",
            "description" : "The odds fraction divided with 1000. For example 1/5 will be returned like 200.",
            "format" : "int32"
          },
          "terms" : {
            "type" : "string",
            "description" : "The terms for the each way bet offer connected to the current bet offer. For example 1/5 3 means the odds will be 1/5 of the winning odds and the first 3 places will be paid out."
          },
          "placeLimit" : {
            "type" : "integer",
            "description" : "The place limit for the each way. The number of positions for a MultiPosition bet offer. (2 for forecast and 3 for tricast)",
            "format" : "int32"
          }
        }
      },
      "Event" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier of the event.",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "Translated event name with display formatting. The formatting can be configured per event group. \n the tag AWAY_HOME indicates if the away team is before the home team in the name.\n The name will be in either of formats: \n* ```homeName``` - ```awayName``` \n* ```homeName``` vs ```awayName``` \n* ```awayName``` vs ```homeName``` \n* ```awayName``` @ ```homeName```\n* ```awayName``` - ```homeName```"
          },
          "nameDelimiter" : {
            "type" : "string",
            "description" : "The delimiter used between the teams in the event name. Only returned for match events."
          },
          "englishName" : {
            "type" : "string",
            "description" : "Event name with default formatting. The name will contain ``homeName`` and ``awayName`` property values separated by a dash. Useful for analytics tracking"
          },
          "homeName" : {
            "type" : "string",
            "description" : "Home team name."
          },
          "awayName" : {
            "type" : "string",
            "description" : "Away team name."
          },
          "start" : {
            "type" : "string",
            "description" : "Event start date and time. See [Data Formats](#/docs/restapi/conventions) for the formatting.",
            "format" : "date-time"
          },
          "originalStartTime" : {
            "type" : "string",
            "description" : "The original start time of the event, usually HH:mm. (Can be seen as a part of the name for racing events)"
          },
          "group" : {
            "type" : "string",
            "description" : "Event group name."
          },
          "groupId" : {
            "type" : "integer",
            "description" : "Event group identifier.",
            "format" : "int64"
          },
          "path" : {
            "type" : "array",
            "description" : "Term-key parents for the event groups of this event",
            "items" : {
              "$ref" : "#/components/schemas/GroupPath"
            }
          },
          "nonLiveBoCount" : {
            "type" : "integer",
            "description" : "The number of active prematch bet offers on this event.",
            "format" : "int32"
          },
          "liveBoCount" : {
            "type" : "integer",
            "description" : "The number of active live bet offers on this event.",
            "format" : "int32"
          },
          "sport" : {
            "type" : "string",
            "description" : "The [sport](#/docs/restapi/sports) for the event. This could typically be identifiers like 'FOOTBALL', 'BOXING', 'BASKET'."
          },
          "tags" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of tags applied to this event.\nValues might include but are not limited to:\n* OFFERED_LIVE - The event will be offered live.\n* STREAMED_WEB - Event will be streamed to web clients.\n* STREAMED_MOBILE - Event will be streamed to mobile clients.\n* ENHANCED_PLACE_TERMS - The event has a bet offer with enhanced place terms (horse racing).\n* PRICEBOOST - The event has a bet offer with an outcome with priceboosted odds compared to odds from racing feed(horse racing).\n* PREMATCH_STATS - Event has statistics.\n* VISUALIZATION - Event will have live visualization.\n* OPEN_FOR_LIVE - The event is open for live betting.\n* SHOW_START_NUMBER - A hint for clients to show start number on participants. Mainly used in racing competitions.\n* MATCH - The event is a match (usually between two participants)\n* COMPETITION - The event is a competition (usually leagues, tournaments etc)\n* AWAY_HOME - Indicates that the name of the event is flipped (Away team first)\n* BET_BUILDER - Bet builder bets are offered for the event.\n* LIVE_OCCURRENCE_FEED - Event will have live occurrence api feed.",
            "items" : {
              "type" : "string",
              "description" : "List of tags applied to this event.\nValues might include but are not limited to:\n* OFFERED_LIVE - The event will be offered live.\n* STREAMED_WEB - Event will be streamed to web clients.\n* STREAMED_MOBILE - Event will be streamed to mobile clients.\n* ENHANCED_PLACE_TERMS - The event has a bet offer with enhanced place terms (horse racing).\n* PRICEBOOST - The event has a bet offer with an outcome with priceboosted odds compared to odds from racing feed(horse racing).\n* PREMATCH_STATS - Event has statistics.\n* VISUALIZATION - Event will have live visualization.\n* OPEN_FOR_LIVE - The event is open for live betting.\n* SHOW_START_NUMBER - A hint for clients to show start number on participants. Mainly used in racing competitions.\n* MATCH - The event is a match (usually between two participants)\n* COMPETITION - The event is a competition (usually leagues, tournaments etc)\n* AWAY_HOME - Indicates that the name of the event is flipped (Away team first)\n* BET_BUILDER - Bet builder bets are offered for the event.\n* LIVE_OCCURRENCE_FEED - Event will have live occurrence api feed."
            }
          },
          "state" : {
            "type" : "string",
            "description" : "The current state of an event",
            "enum" : [ "NOT_STARTED", "STARTED", "FINISHED", "UNKNOWN", "NOT_STARTED", "STARTED", "FINISHED" ]
          },
          "distance" : {
            "type" : "string",
            "description" : "String representing the distance of for example a horse racing event."
          },
          "eventNumber" : {
            "type" : "integer",
            "description" : "For example a horse racing event can consist of several races. Each race will be an individual event in the API.\nThe eventNumber is the number of the race.",
            "format" : "int32"
          },
          "nameDetails" : {
            "type" : "string",
            "description" : "For example a horse racing event can consist of several races. Each race will be an individual event in the API.\nThe nameDetails is additional information for the event name.\n"
          },
          "editorial" : {
            "type" : "string",
            "description" : "An editorial about the event. For example a description of conditions of a horse racing course."
          },
          "raceClass" : {
            "type" : "string",
            "description" : "Class of race. For example '3'."
          },
          "raceType" : {
            "type" : "string",
            "description" : "Type of race. For example\n  * Flat\n  * Hurdle\n  * Chase\n  * National Hunt Flat"
          },
          "trackType" : {
            "type" : "string",
            "description" : "Type of track. For example 'Turf'."
          },
          "going" : {
            "type" : "string",
            "description" : "The going at the race. For example 'Good to Soft (Good in places on the home straight)'."
          },
          "timeform" : {
            "$ref" : "#/components/schemas/TimeformRacingInformation"
          },
          "participants" : {
            "type" : "array",
            "description" : "The list of event participants. Shown if the event is a racing event. For now applicable for sports 'GALLOPS', 'HARNESS' and 'GREYHOUNDS'.",
            "items" : {
              "$ref" : "#/components/schemas/EventParticipant"
            }
          },
          "rank" : {
            "type" : "integer",
            "description" : "The total ranking of all the participants",
            "format" : "int32"
          },
          "groupSortOrder" : {
            "type" : "integer",
            "description" : "The sort order of the event group for this event. With low number ranked higher.",
            "format" : "int64"
          },
          "teamColors" : {
            "$ref" : "#/components/schemas/TeamColors"
          },
          "sortOrder" : {
            "type" : "integer",
            "description" : "Sort order of the event within its event group, administrated through Presentation Manager.",
            "format" : "int32"
          },
          "prematchEnd" : {
            "type" : "string",
            "description" : "Timestamp when the event should no longer be considered prematch. Last date and time of the event closing time and all its prematch betoffers. See [Data Formats](#/docs/restapi/conventions) for the formatting.",
            "format" : "date-time"
          },
          "meetingId" : {
            "type" : "string",
            "description" : "Unique identifier for a meeting that this event is part of, only applicable for horse racing and greyhound sport."
          },
          "extraInfo" : {
            "type" : "string",
            "description" : "The extra information which is relevant to an event."
          }
        },
        "description" : "Represents one event, either a match or a competition."
      },
      "EventParticipant" : {
        "type" : "object",
        "properties" : {
          "participantId" : {
            "type" : "integer",
            "description" : "Participant unique identifier",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the participant"
          },
          "extended" : {
            "$ref" : "#/components/schemas/ExtendedEventParticipant"
          },
          "scratched" : {
            "type" : "boolean",
            "description" : "If the participant is scratched or not"
          },
          "nonRunner" : {
            "type" : "boolean"
          },
          "home" : {
            "type" : "boolean",
            "description" : "If the participant is the home team of a match"
          },
          "startNumber" : {
            "type" : "integer",
            "description" : "The participant's start number",
            "format" : "int32"
          },
          "participantType" : {
            "type" : "string",
            "description" : "The type of the participant",
            "enum" : [ "TEAM", "PARTICIPANT", "LABEL", "UNKNOWN" ]
          }
        },
        "description" : "Represents a participant within an Event"
      },
      "EventStats" : {
        "type" : "object",
        "properties" : {
          "football" : {
            "$ref" : "#/components/schemas/FootballStats"
          },
          "sets" : {
            "$ref" : "#/components/schemas/SetBasedStats"
          }
        },
        "description" : " Event statistics. The structure is different, depending if the event is set based or match based.\n Tennis is set based and football is match based. Omitted if statistics is disabled for an event."
      },
      "EventWithBetOffers" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "$ref" : "#/components/schemas/Event"
          },
          "betOffers" : {
            "type" : "array",
            "description" : "List of bet offers belonging to this event.",
            "items" : {
              "$ref" : "#/components/schemas/BetOffer"
            }
          },
          "liveData" : {
            "$ref" : "#/components/schemas/LiveData"
          }
        },
        "description" : "Wrapper around an Event with its bet offers and live data"
      },
      "ExtendedEventParticipant" : {
        "type" : "object",
        "properties" : {
          "startNumber" : {
            "type" : "integer",
            "description" : "The participant's start number",
            "format" : "int32"
          },
          "startPosition" : {
            "type" : "integer",
            "description" : "The participant's start position",
            "format" : "int32"
          },
          "driverName" : {
            "type" : "string",
            "description" : "The driver name. For example the jockey in a horse racing event."
          },
          "age" : {
            "type" : "string",
            "description" : "The participant's (horse or hound) age"
          },
          "weight" : {
            "type" : "string",
            "description" : "For example the weight carried by the horse."
          },
          "editorial" : {
            "type" : "string",
            "description" : "An editorial about the participant. For example about previous competitions"
          },
          "hasIcon" : {
            "type" : "boolean",
            "description" : " If the value is ``true``, then the participant has an icon."
          },
          "icon" : {
            "type" : "string",
            "description" : "(A base 64 encoded byte representation of the participant's icon (for example silk for horse racing))"
          },
          "trainerName" : {
            "type" : "string",
            "description" : "The name of the participant's trainer"
          },
          "formFigures" : {
            "type" : "array",
            "description" : "A list of recent form (figures) for the participant.",
            "items" : {
              "$ref" : "#/components/schemas/FormFigures"
            }
          },
          "lastRunDays" : {
            "type" : "array",
            "description" : "A list of number of days since the participant last competed.",
            "items" : {
              "$ref" : "#/components/schemas/LastRunDays"
            }
          },
          "raceHistoryStat" : {
            "type" : "array",
            "description" : "The list of competition history for the participant.",
            "items" : {
              "$ref" : "#/components/schemas/RaceHistoryStat"
            }
          },
          "timeform" : {
            "$ref" : "#/components/schemas/TimeformParticipantInformation"
          }
        },
        "description" : "Extended information about a race event participant"
      },
      "FootballStats" : {
        "type" : "object",
        "properties" : {
          "home" : {
            "$ref" : "#/components/schemas/Team"
          },
          "away" : {
            "$ref" : "#/components/schemas/Team"
          }
        },
        "description" : "Match based statistics"
      },
      "FormFigures" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "figures" : {
            "type" : "string"
          }
        },
        "description" : "Recent form figure entry for a participant"
      },
      "GroupPath" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Event group ID",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "Translated name of this event group"
          },
          "englishName" : {
            "type" : "string",
            "description" : "English name of this event group"
          },
          "termKey" : {
            "type" : "string",
            "description" : "Term key of this event group"
          }
        },
        "description" : "Event group path entry"
      },
      "LastRunDays" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : " Possible values:\n  * Flat\n  * Jump"
          },
          "days" : {
            "type" : "string",
            "description" : "The number of days. For example '213'."
          }
        },
        "description" : "Last run entry where participant competed."
      },
      "LiveData" : {
        "type" : "object",
        "properties" : {
          "eventId" : {
            "type" : "integer",
            "description" : "Unique identifier of the event.",
            "format" : "int64"
          },
          "matchClock" : {
            "$ref" : "#/components/schemas/MatchClock"
          },
          "score" : {
            "$ref" : "#/components/schemas/Score"
          },
          "statistics" : {
            "$ref" : "#/components/schemas/EventStats"
          },
          "description" : {
            "type" : "string",
            "description" : "Free-form description of the event (not localized)"
          },
          "latestVisualization" : {
            "$ref" : "#/components/schemas/VisualizationOccurrence"
          },
          "occurrences" : {
            "type" : "array",
            "description" : "Optional, match occurrences",
            "items" : {
              "$ref" : "#/components/schemas/MatchOccurrence"
            }
          },
          "liveFeedUpdates" : {
            "type" : "array",
            "description" : "Optional, live feed updates",
            "items" : {
              "$ref" : "#/components/schemas/LiveFeedUpdateDto"
            }
          },
          "tickers" : {
            "type" : "array",
            "description" : "Optional, ticker updates",
            "items" : {
              "$ref" : "#/components/schemas/TickerUpdate"
            }
          },
          "liveStatistics" : {
            "type" : "array",
            "description" : "Live statistics",
            "items" : {
              "$ref" : "#/components/schemas/LiveStats"
            }
          }
        },
        "description" : "Live (real time) data for an event. The data includes scores, match clock (if available) and team statistics (if available). Text labels are localized according to submitted request parameter lang."
      },
      "LiveFeedUpdateDto" : {
        "type" : "object",
        "properties" : {
          "ticker" : {
            "$ref" : "#/components/schemas/TickerUpdate"
          },
          "score" : {
            "$ref" : "#/components/schemas/Score"
          },
          "type" : {
            "type" : "string"
          }
        },
        "description" : "Optional, live feed updates"
      },
      "LiveStats" : {
        "type" : "object",
        "properties" : {
          "occurrenceTypeId" : {
            "type" : "string",
            "description" : "Type of the occurrence. Examples:\nFootball: \n  * Attacks (ATTACK_HOME, ATTACK_AWAY)  * Dangerous Attacks (DANGEROUS_ATTACK_HOME, DANGEROUS_ATTACK_AWAY)  * Shots on Target (SHOTS_ON_TARGET_HOME, SHOTS_ON_TARGET_AWAY)  * Shots off Target (SHOTS_OFF_TARGET_HOME, SHOTS_OFF_TARGET_AWAY)  * Goals (GOALS_HOME,GOALS_AWAY)  * Yellow Cards (CARDS_YELLOW_HOME, CARDS_YELLOW_AWAY)  * Red Cards (CARDS_RED_HOME, CARDS_RED_AWAY)  * Corners (CORNERS_HOME, CORNERS_AWAY)\n\nTennis: \n  * ACES_WON_HOME, ACES_WON_AWAY (sum of occurrences)  * DOUBLE_FAULTS_HOME, DOUBLE_FAULTS_AWAY (sum of occurrences)  * FIRST_SERVE_WINNING_HOME, FIRST_SERVICE_WINNING_AWAY (percentage)  * BREAK_POINT_CONVERSION_HOME, BREAK_POINT_CONVERSION_AWAY (percentage)"
          },
          "count" : {
            "type" : "integer",
            "description" : "Number of times the occurrence has occurred in the match.",
            "format" : "int32"
          }
        },
        "description" : "Occurrence counter for one specific occurrence type."
      },
      "MatchClock" : {
        "type" : "object",
        "properties" : {
          "minute" : {
            "type" : "integer",
            "description" : "Current minutes on the event clock.",
            "format" : "int32"
          },
          "second" : {
            "type" : "integer",
            "description" : "Current seconds on the event clock.",
            "format" : "int32"
          },
          "minutesLeftInPeriod" : {
            "type" : "integer",
            "description" : "Minutes remaining in the period. (Only available for sports supporting reverse match clock.)",
            "format" : "int32"
          },
          "secondsLeftInMinute" : {
            "type" : "integer",
            "description" : "Seconds remaining in the minute. (Only available for sports supporting reverse match clock.)",
            "format" : "int32"
          },
          "period" : {
            "type" : "string",
            "description" : "Current event period. Value is a localized string label or a number in string format."
          },
          "running" : {
            "type" : "boolean",
            "description" : " If value is ``true``, then the event clock is running. Otherwise the clock has been stopped.\n The API user should tick up the clock (or down if showing reverse time) each second until the match clock is updated or event is removed."
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "If value is ``true``, then the event clock is disabled for this event. Otherwise the clock is enabled."
          }
        },
        "description" : "Match clock of the current event."
      },
      "MatchOccurrence" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifier of the occurrence within the event. Ascending order",
            "format" : "int64"
          },
          "eventId" : {
            "type" : "integer",
            "description" : "Identifier of the event the message applies to.",
            "format" : "int64"
          },
          "occurrenceTypeId" : {
            "type" : "string",
            "description" : "Type of the occurrence. Examples:\nFootball: \n  * Attacks (ATTACK_HOME, ATTACK_AWAY)  * Dangerous Attacks (DANGEROUS_ATTACK_HOME, DANGEROUS_ATTACK_AWAY)  * Shots on Target (SHOTS_ON_TARGET_HOME, SHOTS_ON_TARGET_AWAY)  * Shots off Target (SHOTS_OFF_TARGET_HOME, SHOTS_OFF_TARGET_AWAY)  * Goals (GOALS_HOME,GOALS_AWAY)  * Yellow Cards (CARDS_YELLOW_HOME, CARDS_YELLOW_AWAY)  * Red Cards (CARDS_RED_HOME, CARDS_RED_AWAY)  * Corners (CORNERS_HOME, CORNERS_AWAY)  * Penalty (PENALTY_AWARDED_HOME, PENALTY_AWARDED_AWAY)  * Lifetime (LIFETIME_END, MATCH_END)\n\nTennis: \n  * ACES_WON_HOME, ACES_WON_AWAY  * DOUBLE_FAULTS_HOME, DOUBLE_FAULTS_AWAY  * FIRST_SERVE_WINNING_HOME, FIRST_SERVICE_WINNING_AWAY  * BREAK_POINT_CONVERSION_HOME, BREAK_POINT_CONVERSION_AWAY"
          },
          "secondInPeriod" : {
            "type" : "integer",
            "description" : "Time of occurrence within current period (every period restarts at 0). Optional.",
            "format" : "int32"
          },
          "secondInMatch" : {
            "type" : "integer",
            "description" : "Time of occurrence within match. Optional.",
            "format" : "int32"
          },
          "secondInPeriodAddedTime" : {
            "type" : "integer",
            "description" : "Time of occurrence within over time. Optional.",
            "format" : "int32"
          },
          "periodId" : {
            "type" : "string",
            "description" : "Text representation of period, e.g. SECOND_HALF"
          },
          "player" : {
            "$ref" : "#/components/schemas/PlayerDto"
          },
          "playerOut" : {
            "$ref" : "#/components/schemas/PlayerDto"
          },
          "additionalProperties" : {
            "type" : "array",
            "description" : "Zero, one or multiple non-translated strings with some additional info. Optional.",
            "items" : {
              "type" : "string",
              "description" : "Zero, one or multiple non-translated strings with some additional info. Optional."
            }
          },
          "action" : {
            "type" : "string",
            "description" : "Message indicating of occurrence happened, corrected or removed",
            "enum" : [ "ADDED", "MODIFIED", "DELETED" ]
          },
          "index" : {
            "type" : "integer",
            "format" : "int32"
          },
          "periodIndex" : {
            "type" : "integer",
            "description" : "Numeric representation of period, e.g. 0 (which is FIRST_HALF in football)",
            "format" : "int32"
          }
        },
        "description" : "Represents a live occurrence within an event, e.g. CARDS_YELLOW_HOME. This entity may also be pushed (mt=25)"
      },
      "OddsStats" : {
        "type" : "object",
        "properties" : {
          "unexpectedOddsTrend" : {
            "type" : "boolean",
            "description" : "If value is true, the odds for the favorite has increased with at least 50% compared to starting odds"
          },
          "outcomeId" : {
            "type" : "integer",
            "description" : "The outcome ID of the specific outcome",
            "format" : "int64"
          },
          "startingOdds" : {
            "type" : "integer",
            "description" : "Starting odds for the specific outcome. Format is described in Data formats.",
            "format" : "int32"
          },
          "startingOddsFractional" : {
            "type" : "string",
            "description" : "Starting odds for the specific outcome, in Fractional format."
          },
          "startingOddsAmerican" : {
            "type" : "string",
            "description" : "Starting odds for the specific outcome, in American format."
          }
        },
        "description" : "Statistics for the favorite outcome, the outcome with lowest odds within this betoffer"
      },
      "Outcome" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique ID of the outcome.",
            "format" : "int64"
          },
          "label" : {
            "type" : "string",
            "description" : "Label for the outcome based on display format configuration. Could be either:\n* home score - away score \n* away score - home score (look for AMERICAN_DISPLAY_FORMAT in betoffer tags)"
          },
          "englishLabel" : {
            "type" : "string",
            "description" : "English language label for the outcome."
          },
          "odds" : {
            "type" : "integer",
            "description" : "Odds for the outcome. See general documentation for format.",
            "format" : "int32"
          },
          "line" : {
            "type" : "integer",
            "description" : "Line for Handicap and Over/Under bet offer.",
            "format" : "int32"
          },
          "distance" : {
            "type" : "string",
            "description" : "Distance for the runner. Applies to Outright bet offer only."
          },
          "scratched" : {
            "type" : "boolean",
            "description" : "Value true means that the participant will not take part of the race. Applies to Outright bet offer only."
          },
          "startNr" : {
            "type" : "integer",
            "description" : "Starting number of the participant. Applies to Outright bet offer only. The value may be empty even for Outright bet offers.",
            "format" : "int32"
          },
          "prevOdds" : {
            "type" : "array",
            "description" : "Odds history for the participant. Applies to Outright bet offer only. Value is a list of the previous values of the odds in reverse chronological order.",
            "items" : {
              "type" : "integer",
              "description" : "Odds history for the participant. Applies to Outright bet offer only. Value is a list of the previous values of the odds in reverse chronological order.",
              "format" : "int32"
            }
          },
          "criterion" : {
            "$ref" : "#/components/schemas/OutcomeCriterion"
          },
          "participant" : {
            "type" : "string",
            "description" : "Participant name. Applies to Head-to-head and Yes/No bet offers only."
          },
          "popular" : {
            "type" : "boolean",
            "description" : "If value is true, then the outcome is one of the most popular outcomes."
          },
          "type" : {
            "type" : "string",
            "description" : "Outcome type identifier. See general documentation for possible values."
          },
          "homeTeamMember" : {
            "type" : "boolean",
            "description" : "boolean, applies to Goalscorer, WinCast and ScoreCast bet offers, and PlayerLastOccurrence/PlayerOccurrenceNumber bet offers with with outcome type OT_ANY_PARTICIPANT"
          },
          "betOfferId" : {
            "type" : "integer",
            "description" : "Unique ID of the bet offer that this outcome belongs to.",
            "format" : "int64"
          },
          "changedDate" : {
            "type" : "string",
            "description" : "Last change date and time of this outcomes' odds. See [Data Formats](#/docs/restapi/conventions) for the formatting."
          },
          "participantId" : {
            "type" : "integer",
            "description" : "The unique id of the outcome’s participant",
            "format" : "int64"
          },
          "oddsFractional" : {
            "type" : "string",
            "description" : "Odds for the outcome, in Fractional format."
          },
          "oddsAmerican" : {
            "type" : "string",
            "description" : "Odds for the outcome, in American format."
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags applied to this event.\nValues might include but are not limited to:\n* PRICEBOOST - The outcome has priceboosted odds compared to odds from racing feed(horse racing).\n",
            "items" : {
              "type" : "string",
              "description" : "List of tags applied to this event.\nValues might include but are not limited to:\n* PRICEBOOST - The outcome has priceboosted odds compared to odds from racing feed(horse racing).\n"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of an Outcome",
            "enum" : [ "OPEN", "CLOSED", "SUSPENDED", "SETTLED" ]
          },
          "cashOutStatus" : {
            "type" : "string",
            "description" : "Cashout status of the outcome.",
            "enum" : [ "ENABLED", "DISABLED", "SUSPENDED" ]
          },
          "homeScore" : {
            "type" : "string",
            "description" : "Home score, applicable for score betoffers. Value is most commonly a numeric value, but could as contain 'W' as in win. (use for tennis)"
          },
          "awayScore" : {
            "type" : "string",
            "description" : "Away score, applicable for score betoffers. Value is most commonly a numeric value, but could as contain 'W' as in win. (use for tennis)"
          },
          "lowerLimit" : {
            "type" : "integer",
            "description" : "Lower limit, applicable for winning margin bet offers. Value is the lower limit depending on the outcome type. Will be omitted if not applicable for type",
            "format" : "int32"
          },
          "upperLimit" : {
            "type" : "integer",
            "description" : "Upper limit, applicable for winning margin bet offers. Value is the upper limit depending on the outcome type. Will be omitted if not applicable for type",
            "format" : "int32"
          },
          "eventParticipantId" : {
            "type" : "integer",
            "description" : "Participant ID, applicable for the different types of player occurrence bet offers. Represents the ID of the event participant this player is a member of",
            "format" : "int64"
          },
          "occurrence" : {
            "$ref" : "#/components/schemas/OutcomeOccurrence"
          }
        },
        "description" : "Represents an outcome belonging to a bet offer"
      },
      "OutcomeCombination" : {
        "type" : "object",
        "properties" : {
          "odds" : {
            "type" : "integer",
            "description" : "Odds for the combined outcomes. Format is described in Data formats.",
            "format" : "int32"
          },
          "oddsFractional" : {
            "type" : "string",
            "description" : "Odds for the combined outcomes, in Fractional format."
          },
          "oddsAmerican" : {
            "type" : "string",
            "description" : "Odds for the combined outcomes, in American format."
          },
          "playerOutcome" : {
            "$ref" : "#/components/schemas/Outcome"
          },
          "resultOutcome" : {
            "$ref" : "#/components/schemas/Outcome"
          }
        },
        "description" : "List of <player outcome - result outcome> pairs with respective odds."
      },
      "OutcomeCriterion" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "integer",
            "description" : "The type of the criterion: 4,8:First Goal  5,9:Last Goal  6,10:To Score    7,11:Not to score",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the criterion"
          }
        },
        "description" : "The criteria of a goal scorer outcome"
      },
      "OutcomeOccurrence" : {
        "type" : "object",
        "properties" : {
          "occurrenceType" : {
            "type" : "string",
            "description" : "Occurrence type outcome, what kind of occurrence this outcome represents. The possible values might be extended.",
            "enum" : [ "DRIVE_RESULT", "BALL_PUNTED", "CARDS", "DRIVE_END", "DRIVE_END_HALF_TIME", "DRIVE_START", "FIELD_GOALS", "FIELD_GOAL", "FIELD_GOAL_ATTEMPTS", "GOALS", "INTERCEPTIONS", "PASSING_YARDS", "PENALTIES", "POINTS", "RECEIVING_YARDS", "ROUGES", "RUSHING_YARDS", "SAFETIES", "SAFETY", "SCORING_PLAY", "SCORING_PLAYS", "TIMEOUT", "TOUCHDOWNS", "TURNOVERS", "TWO_POINT_SAFETIES", "UNTYPED" ]
          },
          "occurrenceTypeLabel" : {
            "type" : "string",
            "description" : "Occurrence type outcome, localized text of the occurrenceType."
          }
        },
        "description" : "Represents occurrence information for an outcome within a OCCURRENCE_METHOD bet offer"
      },
      "PlayerDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier for the player (not participant id).",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "Localized name of the player."
          }
        },
        "description" : "Optional if this occurrence is a substitution, then this indicates which player left the field."
      },
      "Position" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "integer",
            "description" : "X position on the field of the occurrence",
            "format" : "int32"
          },
          "y" : {
            "type" : "integer",
            "description" : "Y position on the field of the occurrence",
            "format" : "int32"
          },
          "zone" : {
            "type" : "string",
            "description" : "In which zone on the field of the occurrence\nMost important zones (not complete list):\n\n  * SAFE_HOME (Home team controls the ball far from opponents goal)\n  * SAFE_AWAY (Away team controls the ball far from opponents goal)\n  * ATTACK_HOME (Home team controls the ball on opponents half)\n  * ATTACK_AWAY (Away team controls the ball on opponents half)\n  * DANGEROUS_ATTACK_HOME (Home team controls the ball close to the penalty area)\n  * DANGEROUS_ATTACK_AWAY (Away team controls the ball close to the penalty area)"
          }
        },
        "description" : "Contains either x and y, or a zone"
      },
      "RaceHistoryStat" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Possible values:\n  * Course\n  * CourseDistance\n  * Distance\n  * BeatenFavourite"
          },
          "stat" : {
            "type" : "string",
            "description" : "Statistic value (e.g. number of wins at course). For example '4'."
          }
        },
        "description" : "Race history entry"
      },
      "Range" : {
        "type" : "object",
        "properties" : {
          "start" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "total" : {
            "type" : "integer",
            "format" : "int32"
          },
          "hasNext" : {
            "type" : "boolean"
          }
        }
      },
      "RequestedEvents" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "events" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EventWithBetOffers"
            }
          },
          "range" : {
            "$ref" : "#/components/schemas/Range"
          },
          "soonMode" : {
            "type" : "string"
          },
          "terms" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResultTerm"
            }
          },
          "activeTermIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RequestedEventsResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RequestedEvents"
            }
          }
        }
      },
      "ResultTerm" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Result item type, available",
            "enum" : [ "PARTICIPANT", "SPORT", "REGION", "LEAGUE" ]
          },
          "id" : {
            "type" : "string",
            "description" : "ListView resource context for displaying search item"
          },
          "termKey" : {
            "type" : "string",
            "description" : "Search term for which result is returned"
          },
          "localizedName" : {
            "type" : "string",
            "description" : "Localized name of the search result item"
          },
          "parentId" : {
            "type" : "string",
            "description" : "ListView resource context for present the parent group"
          },
          "englishName" : {
            "type" : "string",
            "description" : "English name of the search result item"
          },
          "value" : {
            "type" : "string",
            "description" : "Value of result term"
          }
        },
        "description" : "search result term"
      },
      "Score" : {
        "type" : "object",
        "properties" : {
          "home" : {
            "type" : "string",
            "description" : "Home team or player score, formatted as a string."
          },
          "away" : {
            "type" : "string",
            "description" : "Away team or player score, formatted as a string."
          },
          "info" : {
            "type" : "string",
            "description" : "Free-form text describing the score."
          },
          "who" : {
            "type" : "string",
            "description" : "Who scored/won the point. Values 'HOME', 'AWAY' or 'UNKNOWN' for initial"
          }
        },
        "description" : "Current event score"
      },
      "SetBasedStats" : {
        "type" : "object",
        "properties" : {
          "home" : {
            "type" : "array",
            "description" : "Array of home team scores in the playing order. Non-played sets have value ``-1``.",
            "items" : {
              "type" : "integer",
              "description" : "Array of home team scores in the playing order. Non-played sets have value ``-1``.",
              "format" : "int32"
            }
          },
          "away" : {
            "type" : "array",
            "description" : "Array of away team scores in the playing order. Non-played sets have value ``-1``.",
            "items" : {
              "type" : "integer",
              "description" : "Array of away team scores in the playing order. Non-played sets have value ``-1``.",
              "format" : "int32"
            }
          },
          "homeServe" : {
            "type" : "boolean",
            "description" : "If value is ``true``, then the home team is serving. Only used for tennis and volleyball events."
          }
        },
        "description" : "Set based statistics"
      },
      "ShirtColors" : {
        "type" : "object",
        "properties" : {
          "shirtColor1" : {
            "type" : "string",
            "description" : "'Half' of the team's shirt color"
          },
          "shirtColor2" : {
            "type" : "string",
            "description" : "'Other half' of the team's shirt color"
          }
        },
        "description" : "Colors of one teams shirt, colors are represented in HEX i.e. (#668863)"
      },
      "Team" : {
        "type" : "object",
        "properties" : {
          "yellowCards" : {
            "type" : "integer",
            "description" : "Number of yellow cards.",
            "format" : "int32"
          },
          "redCards" : {
            "type" : "integer",
            "description" : "Number of red cards.",
            "format" : "int32"
          },
          "corners" : {
            "type" : "integer",
            "description" : "Number of corners.",
            "format" : "int32"
          }
        },
        "description" : "Away team statistics"
      },
      "TeamColors" : {
        "type" : "object",
        "properties" : {
          "home" : {
            "$ref" : "#/components/schemas/ShirtColors"
          },
          "away" : {
            "$ref" : "#/components/schemas/ShirtColors"
          }
        },
        "description" : "Colors of the teams shirts"
      },
      "TickerUpdate" : {
        "type" : "object",
        "properties" : {
          "eventId" : {
            "type" : "integer",
            "description" : "The event this ticker message applies to.",
            "format" : "int64"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the message. Examples of some values:\n\n  * TT_MSG\tCustom message\n  * TT_GAME\tGame was won\n  * TT_SET\tSet was won\n  * TT_MATCH\tMatch was won\n  * TT_GOAL\tGoal was scored\n  * TT_OWN_GOAL\tOwn goal was scored\n  * TT_YELLOW\tYellow card was given\n  * TT_RED\tRed card was given\n  * TT_CORNER\tCorner kick was awarded\n  * TT_SUBST\tSubstitution was made\n  * TT_MATCH_STARTED\tThe match started\n  * TT_FH_END\tFirst half finished\n  * TT_SH_START\tFirst half finished\n  * TT_SH_END\tFirst half finished\n"
          },
          "minute" : {
            "type" : "integer",
            "description" : "Minute of the occurrence, number of minutes since the start of the event",
            "format" : "int32"
          },
          "message" : {
            "type" : "string",
            "description" : "Localized message of the occurrence"
          },
          "id" : {
            "type" : "integer",
            "description" : "Ticker order identifier. Ascending. If message with an already received ticker identifier, should replace old ticker message.",
            "format" : "int64"
          }
        },
        "description" : "Represents a live occurrence within an event, e.g. TT_YELLOW. This entity may also be pushed (mt=19)\n Example of TT_MSG are 'Match delayed due to rain'"
      },
      "TimeformParticipantInformation" : {
        "type" : "object",
        "properties" : {
          "analystsComments" : {
            "type" : "string",
            "description" : "The analyst comment for the horse's chance in the race."
          },
          "rating123" : {
            "type" : "integer",
            "description" : "The Timeform 123 selections by analysts.",
            "format" : "int32"
          },
          "ratingStars" : {
            "type" : "integer",
            "description" : "The number of stars attributed to the horses chances by the analyst",
            "format" : "int32"
          },
          "performances" : {
            "type" : "array",
            "description" : "Information from previous races",
            "items" : {
              "$ref" : "#/components/schemas/TimeformRacingPerformance"
            }
          }
        },
        "description" : "Extra information from timeform. Only available for offerings which have timeform enabled."
      },
      "TimeformRacingInformation" : {
        "type" : "object",
        "properties" : {
          "analystVerdict" : {
            "type" : "string",
            "description" : "The Timeform Analyst prerace predictions."
          },
          "drawComment" : {
            "type" : "string",
            "description" : "The comment for flat racing which is based on analysis of previous races at this course over the same distance."
          }
        },
        "description" : "Extra information on timeform for racing events. Only available for offerings which have timeform enabled."
      },
      "TimeformRacingPerformance" : {
        "type" : "object",
        "properties" : {
          "raceDay" : {
            "type" : "string",
            "description" : "The date of the race on the format yyyy-MM-dd.",
            "format" : "date"
          },
          "courseName" : {
            "type" : "string",
            "description" : "The name of the course"
          },
          "raceNumber" : {
            "type" : "integer",
            "description" : "The number of the race",
            "format" : "int32"
          },
          "distanceFurlongs" : {
            "type" : "integer",
            "description" : "The number of complete furlongs the race was run over.",
            "format" : "int32"
          },
          "distanceYards" : {
            "type" : "integer",
            "description" : "The number of yards the race was run over in addition to the furlongs.",
            "format" : "int32"
          },
          "going" : {
            "type" : "string",
            "description" : "The going of the race."
          },
          "raceType" : {
            "type" : "string",
            "description" : "The type of race."
          },
          "positionStatus" : {
            "type" : "string",
            "description" : "Populated if the horse failed to complete or was disqualified. Examples: F - Fell, pu - pulled up, d - dq'd, ur - unseated rider."
          },
          "positionOfficial" : {
            "type" : "integer",
            "description" : "The official finishing position of the horse. Examples: 0 - horse failed to finish, 1 - first.",
            "format" : "int32"
          },
          "numberOfRunners" : {
            "type" : "integer",
            "description" : " The number of runners that ran in the race.",
            "format" : "int32"
          },
          "jockey" : {
            "type" : "string",
            "description" : "Jockey name."
          },
          "trainer" : {
            "type" : "string",
            "description" : "Trainer name."
          },
          "startingPrice" : {
            "type" : "integer",
            "description" : "The decimal price that the horse was at the start of the race.",
            "format" : "int32"
          },
          "startingPriceFractional" : {
            "type" : "string",
            "description" : "The fractional price that the horse was at the start of the race."
          }
        },
        "description" : "Information from previous races"
      },
      "Visualization" : {
        "type" : "object",
        "properties" : {
          "position" : {
            "$ref" : "#/components/schemas/Position"
          }
        }
      },
      "VisualizationOccurrence" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifier of the occurrence. Ascending order",
            "format" : "int64"
          },
          "eventId" : {
            "type" : "integer",
            "description" : "Identifier of the event the message applies to",
            "format" : "int64"
          },
          "occurrenceTypeId" : {
            "type" : "string",
            "description" : "Type of the occurrence. Examples:\nFootball: \n  * Attacks (ATTACK_HOME, ATTACK_AWAY)  * Dangerous Attacks (DANGEROUS_ATTACK_HOME, DANGEROUS_ATTACK_AWAY)  * Shots on Target (SHOTS_ON_TARGET_HOME, SHOTS_ON_TARGET_AWAY)  * Shots off Target (SHOTS_OFF_TARGET_HOME, SHOTS_OFF_TARGET_AWAY)  * Goals (GOALS_HOME,GOALS_AWAY)  * Yellow Cards (CARDS_YELLOW_HOME, CARDS_YELLOW_AWAY)  * Red Cards (CARDS_RED_HOME, CARDS_RED_AWAY)  * Corners (CORNERS_HOME, CORNERS_AWAY)  * Penalty (PENALTY_AWARDED_HOME, PENALTY_AWARDED_AWAY)  * Lifetime (LIFETIME_END, MATCH_END)\n\nTennis: \n  * ACES_WON_HOME, ACES_WON_AWAY  * DOUBLE_FAULTS_HOME, DOUBLE_FAULTS_AWAY  * FIRST_SERVE_WINNING_HOME, FIRST_SERVICE_WINNING_AWAY  * BREAK_POINT_CONVERSION_HOME, BREAK_POINT_CONVERSION_AWAY"
          },
          "periodId" : {
            "type" : "string",
            "description" : "Text representing time period, e.g. SECOND_HALF"
          },
          "visualization" : {
            "$ref" : "#/components/schemas/Visualization"
          }
        },
        "description" : "Represents one visualization occurrence within an event, e.g. CARDS_YELLOW_HOME. This entity may also be pushed (mt=27)"
      },
      "BetOfferResponse" : {
        "type" : "object",
        "properties" : {
          "betOffers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BetOffer"
            }
          },
          "events" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Event"
            }
          },
          "prePacks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PrePack"
            }
          },
          "range" : {
            "$ref" : "#/components/schemas/Range"
          }
        },
        "description" : "Response with list of bet offers, events and group information."
      },
      "OddsDto" : {
        "type" : "object",
        "properties" : {
          "decimal" : {
            "type" : "integer",
            "description" : "Odds. See general documentation for format.",
            "format" : "int32"
          },
          "american" : {
            "type" : "string",
            "description" : "Odds in American format."
          },
          "fractional" : {
            "type" : "string",
            "description" : "Odds in Fractional format."
          }
        },
        "description" : "The odds for the combination of the selected outcomes."
      },
      "PrePack" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier of the pre pack.",
            "format" : "int64"
          },
          "label" : {
            "type" : "string",
            "description" : "Localized label for the pre pack."
          },
          "prePackSelections" : {
            "type" : "array",
            "description" : "List of pre pack selections.",
            "items" : {
              "$ref" : "#/components/schemas/PrePackSelection"
            }
          }
        },
        "description" : "Represents a pre pack."
      },
      "PrePackCombination" : {
        "type" : "object",
        "properties" : {
          "odds" : {
            "$ref" : "#/components/schemas/OddsDto"
          },
          "groups" : {
            "type" : "array",
            "description" : "List of pre pack selection outer outcome group.",
            "items" : {
              "$ref" : "#/components/schemas/PrePackOuterOutcomeGroup"
            }
          }
        },
        "description" : "Represents a combination belonging to a pre pack"
      },
      "PrePackInnerOutcomeGroup" : {
        "type" : "object",
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "The outcome group operation of a pre pack selection combination",
            "enum" : [ "AND" ]
          },
          "outcomes" : {
            "type" : "array",
            "description" : "List of pre pack outcomes.",
            "items" : {
              "$ref" : "#/components/schemas/PrePackOutcome"
            }
          }
        },
        "description" : "Represents a inner outcome group belonging to a pre pack"
      },
      "PrePackOutcome" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique ID of the outcome.",
            "format" : "int64"
          },
          "eventId" : {
            "type" : "integer",
            "description" : "Unique ID of the event.",
            "format" : "int64"
          }
        },
        "description" : "Represents an outcome belonging to a pre pack selection"
      },
      "PrePackOuterOutcomeGroup" : {
        "type" : "object",
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "The outcome group operation of a pre pack selection combination",
            "enum" : [ "AND" ]
          },
          "groups" : {
            "type" : "array",
            "description" : "List of pre pack inner outcome group.",
            "items" : {
              "$ref" : "#/components/schemas/PrePackInnerOutcomeGroup"
            }
          }
        },
        "description" : "Represents a outer outcome group belonging to a pre pack"
      },
      "PrePackSelection" : {
        "type" : "object",
        "properties" : {
          "selectionId" : {
            "type" : "integer",
            "description" : "Unique ID of the pre pack.",
            "format" : "int64"
          },
          "label" : {
            "type" : "array",
            "description" : "Localized label for the pre pack selection.",
            "items" : {
              "type" : "string",
              "description" : "Localized label for the pre pack selection."
            }
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of a pre pack selection",
            "enum" : [ "OPEN", "CLOSED", "SUSPENDED" ]
          },
          "combinations" : {
            "type" : "array",
            "description" : "List of pre pack selection combinations.",
            "items" : {
              "$ref" : "#/components/schemas/PrePackCombination"
            }
          }
        },
        "description" : "Represents a selection belonging to a pre pack"
      },
      "BetOfferCombinedResponse" : {
        "type" : "object",
        "properties" : {
          "events" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EventWithBetOffers"
            }
          },
          "range" : {
            "$ref" : "#/components/schemas/Range"
          },
          "group" : {
            "$ref" : "#/components/schemas/Group"
          }
        },
        "description" : "Response with list of events with bet offers and live data."
      },
      "Group" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier of the event group",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the event group, localized according to the lang parameter"
          },
          "boCount" : {
            "type" : "integer",
            "description" : "The number of active bet offers in the event group",
            "format" : "int32"
          },
          "uri" : {
            "type" : "string",
            "description" : "URI for the event group. The URI can be used to fetch the subgroups of the event group"
          },
          "englishName" : {
            "type" : "string",
            "description" : "The english name for group"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Group"
            }
          },
          "sport" : {
            "type" : "string",
            "description" : "The [sport](#/docs/restapi/sports) of the event group"
          },
          "eventCount" : {
            "type" : "integer",
            "description" : "Total events in this event group",
            "format" : "int32"
          },
          "secondsToNextEvent" : {
            "type" : "integer",
            "description" : "Indicating the number of seconds until the next event in this group starts",
            "format" : "int64"
          },
          "termKey" : {
            "type" : "string",
            "description" : "Normalized name of the group"
          },
          "pathTermId" : {
            "type" : "string"
          },
          "sortOrder" : {
            "type" : "string",
            "description" : "Event groups in response are already sorted. Regardless of that, a sort order is included. Sort order is useful when new event group is added by push message. It allows to insert pushed event group into right place in tree.\nSort order value is a number that contains event group sort order priority.\nAlgorithm for sorting event groups is following:<li>Sort event groups by sortOrder number</li><li>If event groups have same sort order value, sort them alphabetically by name</li><li>If no sort order is presented, sort them alphabetically by name and put after sorted event groups</li>"
          }
        },
        "description" : "Event group"
      },
      "BetOfferCategory" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Bet offer category identifier",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "Localized name for the bet offer category"
          },
          "englishName" : {
            "type" : "string",
            "description" : "English name for the bet offer category"
          },
          "sortOrder" : {
            "type" : "integer",
            "description" : "If categories are shown to the end user, the category list should be sorted according to this property value.",
            "format" : "int32"
          },
          "displayBoTypeHeaders" : {
            "type" : "boolean",
            "description" : "If value is true, then the bet offer type header should be displayed to the end user."
          },
          "mappings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BetOfferCategoryMapping"
            }
          },
          "sport" : {
            "type" : "string",
            "description" : "The [sport](#/docs/restapi/sports) to which bet offer category belongs."
          }
        },
        "description" : "List of bet offer categories available for the group."
      },
      "BetOfferCategoryMapping" : {
        "type" : "object",
        "properties" : {
          "criterionId" : {
            "type" : "integer",
            "description" : "Bet offer criterion identifier. If value is missing, then the criterion identifier is not used when checking which category the bet offer belongs in",
            "format" : "int64"
          },
          "boType" : {
            "type" : "integer",
            "description" : "Bet offer type identifier",
            "format" : "int32"
          },
          "sortOrder" : {
            "type" : "integer",
            "description" : "Optional. Bet offers in the category should be sorted according to this property value",
            "format" : "int32"
          }
        },
        "description" : "Definition of which bet offers belong to the bet offer category. A bet offer belongs to the bet offer category if it matches the bet offer type and criterion id of the category"
      },
      "BetOfferCategoryResponse" : {
        "type" : "object",
        "properties" : {
          "categoryGroups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BetOfferCategory"
            }
          }
        }
      },
      "GroupResponse" : {
        "type" : "object",
        "properties" : {
          "group" : {
            "$ref" : "#/components/schemas/Group"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Group"
            }
          }
        }
      },
      "LiveDataResponse" : {
        "type" : "object",
        "properties" : {
          "liveData" : {
            "$ref" : "#/components/schemas/LiveData"
          }
        },
        "description" : "Response with live (real time) data for an event."
      },
      "LiveEvent" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "$ref" : "#/components/schemas/Event"
          },
          "liveData" : {
            "$ref" : "#/components/schemas/LiveData"
          },
          "mainBetOffer" : {
            "$ref" : "#/components/schemas/BetOffer"
          }
        },
        "description" : "One event, with its [main bet offer](#/docs/domain/betoffer) and live (real time) data."
      },
      "LiveEventResponse" : {
        "type" : "object",
        "properties" : {
          "liveEvents" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LiveEvent"
            }
          },
          "group" : {
            "$ref" : "#/components/schemas/Group"
          }
        },
        "description" : "Response for an event group and live (real time) data for events within that group."
      },
      "EventResponse" : {
        "type" : "object",
        "properties" : {
          "events" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Event"
            }
          }
        },
        "description" : "Response with a list of events."
      },
      "ExternalEventMapping" : {
        "type" : "object",
        "properties" : {
          "externalId" : {
            "type" : "integer",
            "description" : "External event ID",
            "format" : "int64"
          },
          "eventId" : {
            "type" : "integer",
            "description" : "Kambi event ID",
            "format" : "int64"
          }
        },
        "description" : "A mapping between Kambi event ID and an external providers event ID"
      },
      "ExternalEventMappingResponse" : {
        "type" : "object",
        "properties" : {
          "eventMapping" : {
            "type" : "array",
            "description" : "A list of mappings",
            "items" : {
              "$ref" : "#/components/schemas/ExternalEventMapping"
            }
          }
        },
        "description" : "A list of mappings"
      },
      "EventCalendarResponse" : {
        "type" : "object",
        "properties" : {
          "events" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Event"
            }
          },
          "eventMappings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ExternalEventMapping"
            }
          },
          "range" : {
            "$ref" : "#/components/schemas/Range"
          },
          "group" : {
            "$ref" : "#/components/schemas/Group"
          }
        },
        "description" : "Response with list of events and external ID mappings"
      },
      "Category" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "The Category Id",
            "format" : "int64"
          },
          "englishName" : {
            "type" : "string",
            "description" : "The name of the category in english."
          },
          "localizedName" : {
            "type" : "string",
            "description" : "The name of the category, localized according to the lang parameter."
          }
        },
        "description" : "The Categories"
      },
      "CategoryGroup" : {
        "type" : "object",
        "properties" : {
          "categoryGroupName" : {
            "type" : "string",
            "description" : "The Category group name"
          },
          "categories" : {
            "type" : "array",
            "description" : "The Categories",
            "items" : {
              "$ref" : "#/components/schemas/Category"
            }
          },
          "localizedName" : {
            "type" : "string",
            "description" : "The name of the category group, localized according to the lang parameter."
          }
        },
        "description" : "Available betoffer category groups for this particular view"
      },
      "ListView" : {
        "type" : "object",
        "properties" : {
          "events" : {
            "type" : "array",
            "description" : "List of events, which belongs to given terms and are within the calculated Soon-mode.",
            "items" : {
              "$ref" : "#/components/schemas/EventWithBetOffers"
            }
          },
          "terms" : {
            "type" : "array",
            "description" : "Array of terms. Both leafs and parent nodes to build up whole tree of terms.",
            "items" : {
              "$ref" : "#/components/schemas/ResultTerm"
            }
          },
          "activeTermIds" : {
            "type" : "array",
            "description" : "Array of requested “term-paths” which actually contains active events",
            "items" : {
              "type" : "string",
              "description" : "Array of requested “term-paths” which actually contains active events"
            }
          },
          "soonMode" : {
            "type" : "string",
            "description" : "Returned interval of events",
            "enum" : [ "HOURLY", "DAILY", "MONTHLY", "NONE" ]
          },
          "categoryGroups" : {
            "type" : "array",
            "description" : "Available betoffer category groups for this particular view",
            "items" : {
              "$ref" : "#/components/schemas/CategoryGroup"
            }
          },
          "activeCategories" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Chosen betoffer category (betoffers are filtered based on this category)",
            "items" : {
              "type" : "string",
              "description" : "Chosen betoffer category (betoffers are filtered based on this category)"
            }
          },
          "activeEventTypes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "eventTypes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Available event types for these term-paths. “matches” and “competitions",
            "items" : {
              "type" : "string",
              "description" : "Available event types for these term-paths. “matches” and “competitions"
            }
          },
          "defaultEventType" : {
            "type" : "string",
            "description" : "Default event type for given term-paths. Mostly depending on sport (most have “matches” but for outright-friendly like wintersport it is “competitions”)"
          }
        },
        "description" : "This contains a list of Events"
      },
      "Context" : {
        "type" : "object",
        "properties" : {
          "sport" : {
            "$ref" : "#/components/schemas/Element"
          },
          "region" : {
            "$ref" : "#/components/schemas/Element"
          },
          "course" : {
            "$ref" : "#/components/schemas/Element"
          }
        },
        "description" : "Context of the meeting, typically the course where the meeting is taking place"
      },
      "Element" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Translated name with default formatting."
          },
          "englishName" : {
            "type" : "string",
            "description" : "Name with default formatting."
          },
          "termKey" : {
            "type" : "string",
            "description" : "Term key of the element with format as “normalized text string”"
          },
          "sortOrder" : {
            "type" : "integer",
            "description" : "The sort order of the element. Lower number means higher sort order. No value is returned for unsorted elements.",
            "format" : "int32"
          }
        },
        "description" : "An element of the context."
      },
      "Meeting" : {
        "type" : "object",
        "properties" : {
          "meetingId" : {
            "type" : "string",
            "description" : "Unique string identifier of the meeting"
          },
          "context" : {
            "$ref" : "#/components/schemas/Context"
          },
          "events" : {
            "type" : "array",
            "description" : "List of basic event data regarding races in the meeting",
            "items" : {
              "$ref" : "#/components/schemas/RaceEvent"
            }
          }
        },
        "description" : "A race meeting"
      },
      "RaceEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier of the event",
            "format" : "int64"
          },
          "startTime" : {
            "type" : "string",
            "description" : "Event start date and time. See [Data Formats](#/docs/restapi/conventions) for the formatting.",
            "format" : "date-time"
          },
          "state" : {
            "type" : "string",
            "description" : "The current state of an event",
            "enum" : [ "NOT_STARTED", "STARTED", "FINISHED", "UNKNOWN" ]
          },
          "originalStartTime" : {
            "type" : "string",
            "description" : "The original start time of the event, in the local timezone of the course. Formatted as HH:mm"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags applicable for the event. Possible tags:\n* STREAMED_WEB - If streaming is available for the event on the channel web (desktop) for the given market.\n* STREAMED_MOBILE - If streaming is available for the event on the channel mobile for the given market.\n* ENHANCED_PLACE_TERMS - The event has a bet offer with enhanced place terms (horse racing).\n* PRICEBOOST - The event has a bet offer with an outcome with priceboosted odds compared to odds from racing feed(horse racing).\n",
            "items" : {
              "type" : "string",
              "description" : "List of tags applicable for the event. Possible tags:\n* STREAMED_WEB - If streaming is available for the event on the channel web (desktop) for the given market.\n* STREAMED_MOBILE - If streaming is available for the event on the channel mobile for the given market.\n* ENHANCED_PLACE_TERMS - The event has a bet offer with enhanced place terms (horse racing).\n* PRICEBOOST - The event has a bet offer with an outcome with priceboosted odds compared to odds from racing feed(horse racing).\n"
            }
          }
        },
        "description" : "A race event"
      },
      "OddsLadder" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the odds ladder, i.e. american, fractional"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OddsLadderStep"
            }
          }
        },
        "description" : "Represents an odds ladder"
      },
      "OddsLadderStep" : {
        "type" : "object",
        "properties" : {
          "odds" : {
            "type" : "integer",
            "description" : "Odds. See general documentation for format.",
            "format" : "int32"
          },
          "converted" : {
            "type" : "string",
            "description" : "Converted odds"
          }
        },
        "description" : "Odds step in the odds ladder"
      },
      "EventOutcomePricingDto" : {
        "title" : "EventOutcomePricing",
        "type" : "object",
        "properties" : {
          "eventId" : {
            "type" : "integer",
            "description" : "The event identifier of the on-demand-pricing bet.",
            "format" : "int64"
          },
          "selectedOutcomeIds" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Outcome identifiers that have been selected and is part of the pricing. Will be empty when there is no selection.",
            "items" : {
              "type" : "integer",
              "description" : "Outcome identifiers that have been selected and is part of the pricing. Will be empty when there is no selection.",
              "format" : "int64"
            }
          },
          "selectedOdds" : {
            "$ref" : "#/components/schemas/OddsDto"
          },
          "combinableOutcomeIds" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Outcome identifiers that can be added to the existing selection of outcomes. If no outcomes are selected then this is the list of combinable outcomes",
            "items" : {
              "type" : "integer",
              "description" : "Outcome identifiers that can be added to the existing selection of outcomes. If no outcomes are selected then this is the list of combinable outcomes",
              "format" : "int64"
            }
          },
          "betOffers" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "BetOffers that have at least one Outcome that are or can be a part on the on-demand-pricing bet.",
            "items" : {
              "$ref" : "#/components/schemas/BetOffer"
            }
          }
        },
        "description" : "Pricing of outcomes within the same event"
      },
      "OnDemandPricingResponse" : {
        "type" : "object",
        "properties" : {
          "pricingList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EventOutcomePricingDto"
            }
          }
        },
        "description" : "Contains multiple pricing of outcomes grouped by events."
      },
      "SearchTermsView" : {
        "type" : "object",
        "properties" : {
          "term" : {
            "type" : "string",
            "description" : "The term (words) to search for"
          },
          "resultTerms" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResultTerm"
            }
          },
          "searchHitsId" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Unique set of all search result identifiers",
            "items" : {
              "type" : "string",
              "description" : "Unique set of all search result identifiers"
            }
          }
        },
        "description" : "Search-terms that matches the free-text"
      },
      "Section" : {
        "type" : "object",
        "properties" : {
          "sectionAttributes" : {
            "$ref" : "#/components/schemas/SectionAttributes"
          },
          "events" : {
            "type" : "array",
            "description" : "The events within this sections",
            "items" : {
              "$ref" : "#/components/schemas/EventWithBetOffers"
            }
          }
        },
        "description" : "Contains attributes and events"
      },
      "SectionAttributes" : {
        "type" : "object",
        "properties" : {
          "eventGroupIds" : {
            "type" : "array",
            "description" : "If section is based on event groups, this list contains the numeric identifier of the event group(s)",
            "items" : {
              "type" : "integer",
              "description" : "If section is based on event groups, this list contains the numeric identifier of the event group(s)",
              "format" : "int64"
            }
          }
        },
        "description" : "Describes a section"
      },
      "SectionResponse" : {
        "type" : "object",
        "properties" : {
          "sections" : {
            "type" : "array",
            "description" : "List of sections",
            "items" : {
              "$ref" : "#/components/schemas/Section"
            }
          }
        },
        "description" : "Contains all the sections"
      },
      "EventName" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier of the event",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "Event name with default formatting. The name will contain homeName and awayName property values separated by a dash."
          },
          "path" : {
            "type" : "array",
            "description" : "Location of the related event in the tree",
            "items" : {
              "$ref" : "#/components/schemas/GroupPath"
            }
          }
        },
        "description" : "Translated event"
      },
      "GroupName" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier of the event group",
            "format" : "int64"
          },
          "path" : {
            "type" : "array",
            "description" : "Location of the related event group in the tree",
            "items" : {
              "$ref" : "#/components/schemas/GroupPath"
            }
          }
        },
        "description" : "A group in the tree"
      },
      "TranslationResponse" : {
        "type" : "object",
        "properties" : {
          "events" : {
            "type" : "array",
            "description" : "Events in this group",
            "items" : {
              "$ref" : "#/components/schemas/EventName"
            }
          },
          "groups" : {
            "type" : "array",
            "description" : "Groups in this group",
            "items" : {
              "$ref" : "#/components/schemas/GroupName"
            }
          }
        },
        "description" : "List of event names and group path for the given ids. Text labels are localized according to submitted request parameter lang."
      }
    }
  }
}